/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    LascauxZelia/sieve Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

process.container              = 'sieve_01.sif'

// Global default params, used in configs
params {
    //set input type
    noapi                      = false
    local                      = false

    //local_data
    single_end                 = false
    local_input                = null
    assembly_input             = false

    //MGnify accession filters
    file_name                  = "accession.csv"
    biome_name                 = "null"
    lineage                    = "null"
    experiment_type            = "null"
    study_accession            = "null"
    sample_accession           = "null"
    instrument_platform        = "null"
    instrument_model           = "null"
    pipeline_version           = "null"
    page_size                  = "10"

    //MGnify taxonomy filters
    taxonomyphylum             = "null"
    taxonomyclass              = "null"
    taxonomyorder              = "null"
    taxonomyfamily             = "null"
    taxonomygenus              = "null"
    taxonomyspecies            = "null"

    //Diamond params
    nodiamond                  = false
    diamond_min_align_reads    = 0
    user_diamond_options       = null
    params.diamond_min_align_assembly = 1


    //Assembler params
    assembler                  = "Megahit"

    //Megahit params
    min_contig_len             = "1000"
    k_step                     = "10"
    k_min                      = "21"

    //MacSyFinder params
    nomacsyfinder              = false
    modelpath                  = "null"
    model                      = "TXSScan"
    nbmodel                    = "all"
    coverage                   = "0.8"
    evalue                     = "-20"
    
    //Binning params
    nomaxbin2                  = false
    noconcoct                  = false
    markers                    = "107"
    probthreshold              = "0.8"
    score_threshold            = "0"
    chunk_size                 = "10000"
    overlap_size               = "0"
    megabin_penalty            = "0.5"
    duplicate_penalty          = "0.6"
    completeness               = "0.50"
    redundancy                 = "1.10"
    f                          = "0.1"
    class_all_bins             = false

    // Boilerplate options
    resultsDir                 = 'results'
    publish_dir_mode           = 'copy'
    help                       = false
    h                          = false
    cpus                       = 8
    python3                    = "/opt/conda/envs/sieve/bin/python3"

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                   = '512.GB'
    max_cpus                     = 80
    max_time                     = '200.h'
}

executor {
    queueSize = 80
}

profiles {
    slurm { includeConfig 'conf/slurm.config' }
    HPC { includeConfig 'conf/base.config' }
    singularity {
        enabled = true
        autoMounts = true 
    }
}

manifest {
    name            = 'sieve'
    author          = """Z. Bontemps"""
    homePage        = 'https://github.com/LascauxZelia/sieve'
    description     = """This pipeline analyses metagenomic data from MGnify API or local data"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
