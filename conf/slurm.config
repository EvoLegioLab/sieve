params {
    project = ""
}

process {
    executor = 'slurm'
    clusterOptions = { "-A $params.project" }
    cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    withName: ACCESSION {
        time          = { check_max (12.h   * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus in [ 1, 140, 255 ] ? 'ignore' : 'retry' }
        maxRetries    = 5
    }
    withName: ACCESSION_TEST {
        time          = { check_max (12.h   * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus in [ 255 ] ? 'ignore' : 'retry' }
        maxRetries    = 5
    }
    withName: TAXONOMY {
        cpus          = { check_max (1     * task.attempt, 'cpus'   ) }
        time          = { check_max (3.h   * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus in [ 1, 255 ] ? 'ignore' : 'retry' }
        maxRetries    = 5
    }
    withName: DOWNLOAD {
        cpus          = { check_max (1     * task.attempt, 'cpus'   ) }
        memory        = { check_max (20.GB * task.attempt, 'memory' ) }
        time          = { check_max (12.h  * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus in [ 1, 255 ] ? 'ignore' : 'retry' }
        maxRetries    = 5
    }
    withName: DIAMOND {
        cpus          = { check_max (18     * task.attempt, 'cpus'   ) }
        memory        = { check_max (100.GB * task.attempt, 'memory' ) }
        time          = { check_max (10.h   * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus in [ 1 ] ? 'ignore' : 'retry' }
    }
    //MEGAHIT returns exit code 250 when running out of memory
    withName: ASSEMBLY {
        cpus          = { check_max (18     * task.attempt, 'cpus'  ) }
        memory        = { check_max (115.GB * task.attempt, 'memory' ) }
        time          = { check_max (24.h   * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus in [143,137,104,134,139,250] ? 'retry' : 'finish' }
    }
    withName: CONTIGS_ANNOTATION {
        cpus          = { check_max (4     * task.attempt, 'cpus'   ) }
        memory        = { check_max (18.GB * task.attempt, 'memory' ) }
        time          = { check_max (6.h   * task.attempt, 'time'   ) }
    }
    withName: MACSYFINDER {
        cpus          = { check_max (2    * task.attempt, 'cpus'   ) }
        memory        = { check_max (6.GB * task.attempt, 'memory' ) }
        time          = { check_max (4.h  * task.attempt, 'time'   ) }
    }
    //returns exit code 247 when running out of memory
    withName: CAT {
        cpus          = { check_max (18     * task.attempt, 'cpus'   ) }
        memory        = { check_max (115.GB * task.attempt, 'memory' ) }
        time          = { check_max (20.h   * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus in [143,137,104,134,139,247] ? 'retry' : 'finish' }
    }
    withName: CONTIGS_COVERAGE {
        cpus          = { check_max (12    * task.attempt, 'cpus'   ) }
        memory        = { check_max (70.GB * task.attempt, 'memory' ) }
        time          = { check_max (12.h  * task.attempt, 'time'   ) }
    }
    withName: BIN_QUALITY_ANNOTATION {
        cpus          = { check_max (2    * task.attempt, 'cpus'   ) }
        memory        = { check_max (8.GB * task.attempt, 'memory' ) }
        time          = { check_max (6.h  * task.attempt, 'time'   ) }
    }
    withName: MAXBIN2 {
        // often fails when insufficient information, so we allow it to gracefully fail without failing the pipeline
        errorStrategy = { task.exitStatus in [ 1, 255 ] ? 'ignore' : 'retry' }
    }
    withName: CONCOCT {
        cpus          = { check_max (2     * task.attempt, 'cpus'   ) }
        memory        = { check_max (6.GB  * task.attempt, 'memory' ) }
        time          = { check_max (4.h   * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus in [1, 255] ? 'ignore' : 'retry' }
    }
    withName: DASTOOL {
        // if binner output not found, bins cannot be assigned and DAS_tool will die with exit status 1
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : task.exitStatus == 1 ? 'ignore' : 'finish' }
    }
    withName: BAT {
        cpus          = { check_max (18     * task.attempt, 'cpus'   ) }
        memory        = { check_max (100.GB * task.attempt, 'memory' ) }
        time          = { check_max (12.h   * task.attempt, 'time'   ) }
    }
}
